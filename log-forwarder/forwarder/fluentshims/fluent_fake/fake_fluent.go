// Code generated by counterfeiter. DO NOT EDIT.
package fluent_fake

import (
	"sync"

	"code.cloudfoundry.org/volume-services-log-forwarder/forwarder/fluentshims"
)

type FakeFluentInterface struct {
	PostStub        func(string, interface{}) error
	postMutex       sync.RWMutex
	postArgsForCall []struct {
		arg1 string
		arg2 interface{}
	}
	postReturns struct {
		result1 error
	}
	postReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFluentInterface) Post(arg1 string, arg2 interface{}) error {
	fake.postMutex.Lock()
	ret, specificReturn := fake.postReturnsOnCall[len(fake.postArgsForCall)]
	fake.postArgsForCall = append(fake.postArgsForCall, struct {
		arg1 string
		arg2 interface{}
	}{arg1, arg2})
	fake.recordInvocation("Post", []interface{}{arg1, arg2})
	fake.postMutex.Unlock()
	if fake.PostStub != nil {
		return fake.PostStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.postReturns
	return fakeReturns.result1
}

func (fake *FakeFluentInterface) PostCallCount() int {
	fake.postMutex.RLock()
	defer fake.postMutex.RUnlock()
	return len(fake.postArgsForCall)
}

func (fake *FakeFluentInterface) PostCalls(stub func(string, interface{}) error) {
	fake.postMutex.Lock()
	defer fake.postMutex.Unlock()
	fake.PostStub = stub
}

func (fake *FakeFluentInterface) PostArgsForCall(i int) (string, interface{}) {
	fake.postMutex.RLock()
	defer fake.postMutex.RUnlock()
	argsForCall := fake.postArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFluentInterface) PostReturns(result1 error) {
	fake.postMutex.Lock()
	defer fake.postMutex.Unlock()
	fake.PostStub = nil
	fake.postReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFluentInterface) PostReturnsOnCall(i int, result1 error) {
	fake.postMutex.Lock()
	defer fake.postMutex.Unlock()
	fake.PostStub = nil
	if fake.postReturnsOnCall == nil {
		fake.postReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFluentInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.postMutex.RLock()
	defer fake.postMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFluentInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fluentshims.FluentInterface = new(FakeFluentInterface)
